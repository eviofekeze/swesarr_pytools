{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to swesarr_pytools","text":"<p>Library for  data retrieval and manipulation of swesarr data for the NASA database.</p> <p>swesarr_pytool is a python library created for easy data retrieval and manipulation swesarr data for the NASA database.</p> <p>The Snow Water Equivalent Synthetic Aperture Radar and Radiometer (SWESARR) is a Tri-Frequency Radar and Radiometer instrument designed to measure the water content in a snowpack. The instrument, developed at NASA\u2019s Goddard Space Flight Center, uses active and passive microwave sensors to map the radio frequency emissions of the snowpack, which can then be turned into a measurement of snow water equivalent.</p> <p>SWESARR has three active (including a dual Ku band) and three passive bands. Radar data is collected in dual polarization (VV, VH) while the radiometer makes single polarization (H) observations.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://eviofekeze.github.io/swesarr_pytools</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Downloading Swesarr data</li> <li>Searching available swesarr flights</li> <li>Retrieving swesarr flight metadata</li> <li>Reading a raster, Lidar and SWESARR</li> <li>Converting SWESARR to dataframe</li> <li>Combining Fall and Winter SWESARR flights into one data frame for analysis</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#swesarr_pytools.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>swesarr_pytools/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/eviofekeze/swesarr_pytools/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>swesarr_pytools could always use more documentation, whether as part of the official swesarr_pytools docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/eviofekeze/swesarr_pytools/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up swesarr_pytools for local development.</p> <ol> <li> <p>Fork the swesarr_pytools repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/swesarr_pytools.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv swesarr_pytools\n$ cd swesarr_pytools/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 swesarr_pytools tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/eviofekeze/swesarr_pytools/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install swesarr_pytools, run this command in your terminal:</p> <pre><code>pip install swesarr_pytools\n</code></pre> <p>This is the preferred method to install swesarr_pytools, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install swesarr_pytools from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/eviofekeze/swesarr_pytools\n</code></pre>"},{"location":"swesarr_pytools/","title":"swesarr_pytools module","text":"<p>Main module.</p>"},{"location":"usage/","title":"Usage","text":"<p>To use swesarr_pytools in a project:</p> <pre><code>from swesarr_pytools.access_swesarr import AccessSwesarr\nfrom datetime import date\n\n\n#Instantiate the Access Object\nmeta_object = AccessSwesarr()\n\n#Retrieve meta\nswesarr_metadata = meta_object.data_meta\n\n#Retrieve flight path\nflight_paths = meta_object.flight_names\n\n#Retrieve flight date\nflight_dates = meta_object.flight_dates\n\n#search for flight within a date range\navailable_dates = meta_object.available_date_within_range(start_date=date(2019, 1, 1),\n                                               end_date=date(2019, 12, 31))\n</code></pre>"},{"location":"examples/data_prep/","title":"Data prep","text":"In\u00a0[1]: Copied! <pre># import sys\n# sys.path.append(\"../\")\n# from swesarr_pytools.data_tools import ReadSwesarr\n</pre> # import sys # sys.path.append(\"../\") # from swesarr_pytools.data_tools import ReadSwesarr  In\u00a0[2]: Copied! <pre># x_band = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_09225VH_XX_01.tif\"\n# flight_folder = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\"\n# lidar_data_path = \"../resources/lidar_data/ASO_GrandMesa_2020Feb13_snowdepth_3m.tif\"\n\n# swesarr_fall_v3 = \"../resources/swesarr_data_v3/19004_011\"\n# swesarr_winter_v3 = \"../resources/swesarr_data_v3/20006_003\"\n\n# swesarr_fall_v1 = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\"\n# swesarr_winter_v1 = \"../resources/swesarr_data/GRMCT2_13802_20006_012_200210_225_XX_01\"\n</pre> # x_band = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_09225VH_XX_01.tif\" # flight_folder = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\" # lidar_data_path = \"../resources/lidar_data/ASO_GrandMesa_2020Feb13_snowdepth_3m.tif\"  # swesarr_fall_v3 = \"../resources/swesarr_data_v3/19004_011\" # swesarr_winter_v3 = \"../resources/swesarr_data_v3/20006_003\"  # swesarr_fall_v1 = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\" # swesarr_winter_v1 = \"../resources/swesarr_data/GRMCT2_13802_20006_012_200210_225_XX_01\" In\u00a0[3]: Copied! <pre># example = ReadSwesarr(flight_path=flight_folder, version=\"v1\")\n# example_list = example.get_data_files()\n# print(f\"Folder List: {example_list}\")\n</pre> # example = ReadSwesarr(flight_path=flight_folder, version=\"v1\") # example_list = example.get_data_files() # print(f\"Folder List: {example_list}\") In\u00a0[4]: Copied! <pre># example_raster = example.get_swesarr_raster()\n# example_raster\n</pre> # example_raster = example.get_swesarr_raster() # example_raster In\u00a0[5]: Copied! <pre># example_df = example.get_swesarr_df()\n# example_df\n</pre> # example_df = example.get_swesarr_df() # example_df In\u00a0[6]: Copied! <pre># x_example = ReadSwesarr(flight_path=flight_folder,version=\"v1\")\n# x_example_raster = x_example.get_swesarr_raster()\n# x_example_raster\n</pre> # x_example = ReadSwesarr(flight_path=flight_folder,version=\"v1\") # x_example_raster = x_example.get_swesarr_raster() # x_example_raster In\u00a0[7]: Copied! <pre># x_example = ReadSwesarr(flight_path=x_band, band='x')\n# x_example_raster = x_example.get_swesarr_raster()\n# x_example_raster\n</pre> # x_example = ReadSwesarr(flight_path=x_band, band='x') # x_example_raster = x_example.get_swesarr_raster() # x_example_raster"},{"location":"examples/data_prep/#uncomment-this-the-following-cells-to-run-on-your-local-environments","title":"Uncomment this the following cells to run on your local environments\u00b6","text":"<ul> <li>Note the path must match where you have the data stored</li> </ul>"},{"location":"examples/downloading_data/","title":"Downloading data","text":"In\u00a0[1]: Copied! <pre>import sys\nsys.path.append(\"../\")\n\n# import the Access Swesarr Class from the access_swesarr submodule\nfrom swesarr_pytools.access_swesarr import AccessSwesarr\n\n# Optional import for data\nfrom datetime import date\n</pre> import sys sys.path.append(\"../\")  # import the Access Swesarr Class from the access_swesarr submodule from swesarr_pytools.access_swesarr import AccessSwesarr  # Optional import for data from datetime import date <pre>SWESARR_PYTOOLS - 2024-10-01 18:29:03,038 - DEBUG - osgeo not found. Moving on..\n</pre> <p>The following cells demonstrate how to view metadata and search for flights within a specific time range.</p> <p><code>data_meta</code>: Provides key-value pairs that map flight paths to their corresponding dates.  <code>flight_name</code> : Gives a complete list of flight paths  <code>flight_dates</code>: Give a complete list of flight dates</p> In\u00a0[2]: Copied! <pre>swesarr_object = AccessSwesarr() # instantiates an object of the Access Swesarr Class\n\nswesarr_metadata = swesarr_object.data_meta # The meta data can be retrieve by simply calling the data_meta\nprint(f\"Flight meta key value pair: {swesarr_metadata}\")\n\nflight_paths = swesarr_object.flight_names\nprint(f\"Flight Paths: {flight_paths}\")\n\n#Retrieve flight date\nflight_dates = swesarr_object.flight_dates\nprint(f\"Flight Dates: {flight_dates}\")\n</pre> swesarr_object = AccessSwesarr() # instantiates an object of the Access Swesarr Class  swesarr_metadata = swesarr_object.data_meta # The meta data can be retrieve by simply calling the data_meta print(f\"Flight meta key value pair: {swesarr_metadata}\")  flight_paths = swesarr_object.flight_names print(f\"Flight Paths: {flight_paths}\")  #Retrieve flight date flight_dates = swesarr_object.flight_dates print(f\"Flight Dates: {flight_dates}\") <pre>Flight meta key value pair: {'GRMCT1_13801_19005_010_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMCT1_13802_19004_013_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMCT1_13802_19005_016_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMCT1_13803_19004_019_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMCT2_13802_20006_012_200210_225_XX_01/': datetime.date(2020, 2, 10), 'GRMCT2_13802_20008_011_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_13802_20009_004_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_13804_20007_022_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMCT2_13804_20008_015_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_13804_20009_008_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_13806_20007_026_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMCT2_13806_20008_019_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_31601_20006_011_200210_225_XX_01/': datetime.date(2020, 2, 10), 'GRMCT2_31801_20007_016_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMCT2_31801_20008_009_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_31803_20007_020_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMCT2_31803_20008_013_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_31803_20009_006_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_31805_20008_017_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_31901_20009_002_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMCT2_31905_20007_024_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMNT1_09302_20006_009_200210_225_XX_01/': datetime.date(2020, 2, 10), 'GRMNT1_09401_19005_006_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMNT1_09401_20006_005_200210_225_XX_01/': datetime.date(2020, 2, 10), 'GRMNT1_09401_20007_007_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMNT1_09402_19004_009_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMNT1_09402_19005_012_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMNT1_09402_20007_010_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMNT1_09402_20008_027_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMNT1_09403_19004_015_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMNT1_09403_19005_018_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMNT1_09403_20007_014_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMNT1_09403_20008_031_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMNT1_09501_20008_023_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMNT1_09502_20007_010_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMST1_27302_20006_007_200210_225_XX_01/': datetime.date(2020, 2, 10), 'GRMST1_27401_19003_007_191104_225_XX_01/': datetime.date(2019, 11, 4), 'GRMST1_27401_19004_005_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMST1_27401_19005_008_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMST1_27401_20007_005_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMST1_27401_20008_021_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMST1_27402_19004_011_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMST1_27402_19005_014_191106_225_XX_01/': datetime.date(2019, 11, 6), 'GRMST1_27402_20008_025_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMST1_27403_19004_017_191105_225_XX_01/': datetime.date(2019, 11, 5), 'GRMST1_27403_20007_012_200211_225_XX_01/': datetime.date(2020, 2, 11), 'GRMST1_27403_20008_029_200212_225_XX_01/': datetime.date(2020, 2, 12), 'GRMST1_27501_20006_003_200210_225_XX_01/': datetime.date(2020, 2, 10), 'GRMST1_27502_20007_009_200211_225_XX_01/': datetime.date(2020, 2, 11)}\nFlight Paths: ['GRMCT1_13801_19005_010_191106_225_XX_01/', 'GRMCT1_13802_19004_013_191105_225_XX_01/', 'GRMCT1_13802_19005_016_191106_225_XX_01/', 'GRMCT1_13803_19004_019_191105_225_XX_01/', 'GRMCT2_13802_20006_012_200210_225_XX_01/', 'GRMCT2_13802_20008_011_200212_225_XX_01/', 'GRMCT2_13802_20009_004_200212_225_XX_01/', 'GRMCT2_13804_20007_022_200211_225_XX_01/', 'GRMCT2_13804_20008_015_200212_225_XX_01/', 'GRMCT2_13804_20009_008_200212_225_XX_01/', 'GRMCT2_13806_20007_026_200211_225_XX_01/', 'GRMCT2_13806_20008_019_200212_225_XX_01/', 'GRMCT2_31601_20006_011_200210_225_XX_01/', 'GRMCT2_31801_20007_016_200211_225_XX_01/', 'GRMCT2_31801_20008_009_200212_225_XX_01/', 'GRMCT2_31803_20007_020_200211_225_XX_01/', 'GRMCT2_31803_20008_013_200212_225_XX_01/', 'GRMCT2_31803_20009_006_200212_225_XX_01/', 'GRMCT2_31805_20008_017_200212_225_XX_01/', 'GRMCT2_31901_20009_002_200212_225_XX_01/', 'GRMCT2_31905_20007_024_200211_225_XX_01/', 'GRMNT1_09302_20006_009_200210_225_XX_01/', 'GRMNT1_09401_19005_006_191106_225_XX_01/', 'GRMNT1_09401_20006_005_200210_225_XX_01/', 'GRMNT1_09401_20007_007_200211_225_XX_01/', 'GRMNT1_09402_19004_009_191105_225_XX_01/', 'GRMNT1_09402_19005_012_191106_225_XX_01/', 'GRMNT1_09402_20007_010_200211_225_XX_01/', 'GRMNT1_09402_20008_027_200212_225_XX_01/', 'GRMNT1_09403_19004_015_191105_225_XX_01/', 'GRMNT1_09403_19005_018_191106_225_XX_01/', 'GRMNT1_09403_20007_014_200211_225_XX_01/', 'GRMNT1_09403_20008_031_200212_225_XX_01/', 'GRMNT1_09501_20008_023_200212_225_XX_01/', 'GRMNT1_09502_20007_010_200211_225_XX_01/', 'GRMST1_27302_20006_007_200210_225_XX_01/', 'GRMST1_27401_19003_007_191104_225_XX_01/', 'GRMST1_27401_19004_005_191105_225_XX_01/', 'GRMST1_27401_19005_008_191106_225_XX_01/', 'GRMST1_27401_20007_005_200211_225_XX_01/', 'GRMST1_27401_20008_021_200212_225_XX_01/', 'GRMST1_27402_19004_011_191105_225_XX_01/', 'GRMST1_27402_19005_014_191106_225_XX_01/', 'GRMST1_27402_20008_025_200212_225_XX_01/', 'GRMST1_27403_19004_017_191105_225_XX_01/', 'GRMST1_27403_20007_012_200211_225_XX_01/', 'GRMST1_27403_20008_029_200212_225_XX_01/', 'GRMST1_27501_20006_003_200210_225_XX_01/', 'GRMST1_27502_20007_009_200211_225_XX_01/']\nFlight Dates: [datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2020, 2, 10), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 10), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 10), datetime.date(2019, 11, 6), datetime.date(2020, 2, 10), datetime.date(2020, 2, 11), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 10), datetime.date(2019, 11, 4), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2020, 2, 12), datetime.date(2019, 11, 5), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 10), datetime.date(2020, 2, 11)]\n</pre> <p>Searching for dates within a range</p> <p>To search within a specific date range, use the available_date_within_range method by specifying a start and end date. You can enter the dates in string using the standard American date format or use the datetime library's date format. The method returns a list of all flight paths available within the specified range.</p> In\u00a0[3]: Copied! <pre>available_dates = swesarr_object.available_date_within_range(start_date=date(2019, 11, 5),\n                                               end_date=date(2019, 11, 6))\nprint(f\"Available flight: {available_dates}\")\n\navailable_dates_string = swesarr_object.available_date_within_range(start_date=\"11/5/19\",\n                                               end_date=\"11/6/19\")\nprint(f\"Available flight: {available_dates_string}\")\n</pre> available_dates = swesarr_object.available_date_within_range(start_date=date(2019, 11, 5),                                                end_date=date(2019, 11, 6)) print(f\"Available flight: {available_dates}\")  available_dates_string = swesarr_object.available_date_within_range(start_date=\"11/5/19\",                                                end_date=\"11/6/19\") print(f\"Available flight: {available_dates_string}\") <pre>Available flight: [datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5)]\nAvailable flight: [datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5)]\n</pre> In\u00a0[4]: Copied! <pre># uncomment the following to download data\n\n\n# swesarr_object.download_data(flight_path=\"GRMCT1_13801_19005_010_191106_225_XX_01\",\n#                              folder_name=\"./swesarr_pytool/resources/swesarr_data/\",\n#                              dem=False,\n#                              band=\"all\")\n</pre> # uncomment the following to download data   # swesarr_object.download_data(flight_path=\"GRMCT1_13801_19005_010_191106_225_XX_01\", #                              folder_name=\"./swesarr_pytool/resources/swesarr_data/\", #                              dem=False, #                              band=\"all\") In\u00a0[5]: Copied! <pre>help(swesarr_object.download_data)\n</pre> help(swesarr_object.download_data) <pre>Help on method download_data in module swesarr_pytools.access_swesarr:\n\ndownload_data(flight_path: str, folder_name: str, band: str = 'all', dem: bool = False) -&gt; None method of swesarr_pytools.access_swesarr.AccessSwesarr instance\n    Downloads data for a specified flight path.\n    \n    This method downloads the associated data into the specified folder. It also\n    allows for filtering by band and includes an option to download DEM (Digital\n    Elevation Model) data.\n    \n    :param flight_path: str\n        The name of the flight path to be downloaded\n    :param folder_name: str\n        The name of the folder where the downloaded data will be stored\n    :param band: str, optional\n        Specifies the band to download (e.g., \"X\", \"KuLo\", \"KuHi\"). Defaults to \"all\",\n        which downloads all available bands\n    :param dem: bool, optional\n        If True, the Digital Elevation Model (DEM) data is downloaded along with the\n        band data. Defaults to False\n    :return: None\n\n</pre> In\u00a0[6]: Copied! <pre>help(swesarr_object.download_all_data)\n</pre> help(swesarr_object.download_all_data) <pre>Help on method download_all_data in module swesarr_pytools.access_swesarr:\n\ndownload_all_data(folder_name: str, band: str = 'all', dem: bool = False) -&gt; None method of swesarr_pytools.access_swesarr.AccessSwesarr instance\n    Downloads data for all flights.\n    \n    This method iterates over all flight paths generated in `self.flight_names` list\n    and downloads the associated data into the specified folder. It also\n    allows for filtering by band and includes an option to download DEM (Digital\n    Elevation Model) data.\n    \n    :param folder_name: str\n        The name of the folder where the downloaded data will be stored\n    :param band: str, optional\n        Specifies the band to download (e.g., \"X\", \"KuLo\", \"KuHi\"). Defaults to \"all\",\n        which downloads all available bands\n    :param dem: bool, optional\n        If True, the Digital Elevation Model (DEM) data is downloaded along with the\n        band data. Defaults to False\n    \n    :return: None\n\n</pre>"},{"location":"examples/downloading_data/#downloading-data","title":"Downloading Data\u00b6","text":""},{"location":"examples/downloading_data/#retrieving-metadata","title":"Retrieving Metadata\u00b6","text":"<p>In this notebook, we will demonstrate the core functionality of the <code>AccessSwesarr</code> class. This class provides essential utilities for viewing SWESARR metadata and downloading SWESARR files.</p>"},{"location":"examples/downloading_data/#data-download","title":"Data Download\u00b6","text":"<p>The <code>AccessSwesarr</code> class also provides functionality to download SWESARR data, either for all frequency bands of a specified flight path or for a single frequency from a selected flight line. The <code>download_data</code> function allows users to specify a flight path and either retrieve all associated frequency bands in one go or focus on downloading data for a specific frequency. This flexibility makes it convenient for users to access the SWESARR data they need based on their particular analysis requirements. You will need to provide a destination folder in addition to the fight path of choice. See help below.</p> <p>Additionally the <code>download_all_data</code> function can be called to download all flight path. See help below</p>"}]}