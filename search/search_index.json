{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to swesarr_pytools","text":"<p>Library for data retrieval and processing of NASA GSFC Snow Water Equivalent Synthetic Aperture Radar and Radiometer data.</p> <p>swesarr_pytool is a python library for data retrieval and processing of NASA GSFC Snow Water Equivalent Synthetic Aperture Radar and Radiometer data.</p> <p>The Snow Water Equivalent Synthetic Aperture Radar and Radiometer (SWESARR) is a Tri-Frequency Radar and Radiometer instrument designed to measure the water content in a snowpack. The instrument, developed at NASA\u2019s Goddard Space Flight Center, uses active and passive microwave sensors to map the radio frequency emissions of the snowpack, which can then be turned into a measurement of snow water equivalent.</p> <p>SWESARR has three active (including a dual Ku band) and three passive bands. Radar data is collected in dual polarization (VV, VH) while the radiometer makes single polarization (H) observations of microwave brightness temperature. Radiometer observations were made at three frequencies (10.65, 18.7, and 36.5 GHz; referred to as X, K, and Ka bands, respectively), at horizontal polarization with a nominal 45-degree look angle.</p> <p>To learn more about SWESARR, please see this tutorial delivered during the NASA Earth Science &amp; UW Hackweek 2024: https://snowex-2024.hackweek.io/tutorials/swesarr/swesarr_tut.html</p> <p>For general information about swesarr see:</p> <ul> <li>https://earth.gsfc.nasa.gov/bio/instruments/snow-water-equivalent-sar-and-radiometer-swesarr</li> <li>https://snow.nasa.gov/instruments/swesarr</li> <li>https://www.thenewtoncorp.com/case-studies/swesarr-snow-water-equivalent-synthetic-aperture-radar-and-radiometer</li> </ul> <ul> <li>Free software: MIT License</li> <li>Documentation: https://eviofekeze.github.io/swesarr_pytools</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Downloading Swesarr data</li> <li>Searching available swesarr flights</li> <li>Retrieving swesarr flight metadata</li> <li>Reading a raster, Lidar and SWESARR</li> <li>Converting SWESARR to dataframe</li> <li>Combining Fall and Winter SWESARR flights into one data frame for analysis</li> </ul> <p>Reference:</p> <p>[1] R. Rinc\u00f3n et al., \"Performance of Swesarr's Multi-Frequency Dual-Polarimetry Synthetic Aperture Radar During Nasa's Snowex Airborne Campaign,\" IGARSS 2020 - 2020 IEEE International Geoscience and Remote Sensing Symposium, Waikoloa, HI, USA, 2020, pp. 6150-6153, doi: 10.1109/IGARSS39084.2020.9324391. keywords: {Radar;Snow;Radar antennas;Synthetic aperture radar; Spaceborne radar;Airborne radar;Instruments;Snow;SAR;SWE},</p> <p>[2] D. R. Boyd, A. M. Alam, M. Kurum, A. C. Gurbuz and B. Osmanoglu, \"Preliminary Snow Water Equivalent Retrieval of SnowEX20 Swesarr Data,\" IGARSS 2022 - 2022 IEEE International Geoscience and Remote Sensing Symposium, Kuala Lumpur, Malaysia, 2022, pp. 3927-3930, doi: 10.1109/IGARSS46834.2022.9883412. keywords: {Radio frequency;Sensitivity;Radar measurements;Spaceborne radar;Snow;NASA;Prediction algorithms;Snow;SWE;Radar;SWESARR;SAR;SnowEx},</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#swesarr_pytools.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>swesarr_pytools/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/eviofekeze/swesarr_pytools/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>swesarr_pytools could always use more documentation, whether as part of the official swesarr_pytools docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/eviofekeze/swesarr_pytools/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up swesarr_pytools for local development.</p> <ol> <li> <p>Fork the swesarr_pytools repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/swesarr_pytools.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv swesarr_pytools\n$ cd swesarr_pytools/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 swesarr_pytools tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/eviofekeze/swesarr_pytools/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install swesarr_pytools, run this command in your terminal:</p> <pre><code>pip install swesarr_pytools\n</code></pre> <p>This is the preferred method to install swesarr_pytools, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install swesarr_pytools from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/eviofekeze/swesarr_pytools\n</code></pre>"},{"location":"swesarr_pytools/","title":"swesarr_pytools module","text":"<p>Main module.</p>"},{"location":"usage/","title":"Usage","text":"<p>To use swesarr_pytools in a project:</p> <pre><code>from swesarr_pytools.access_swesarr import AccessSAR\nfrom datetime import date\n\n# Instantiate the Access Object\nmeta_object = AccessSAR()\n\n# Retrieve meta\nswesarr_metadata = meta_object.data_meta\n\n# Retrieve flight path\nflight_paths = meta_object.flight_names\n\n# Retrieve flight date\nflight_dates = meta_object.flight_dates\n\n# search for flight within a date range\navailable_dates = meta_object.available_date_within_range(start_date=date(2019, 1, 1),\n                                                          end_date=date(2019, 12, 31))\n</code></pre>"},{"location":"examples/downloading_radiom/","title":"Downloading radiom","text":"In\u00a0[3]: Copied! <pre>import sys\nimport pprint\nsys.path.append(\"../\")\n\n# import the Access Swesarr Class from the access_swesarr submodule\nfrom swesarr_pytools.access_swesarr import AccessRadiometer\n\n# Optional import for data\nfrom datetime import date\n</pre> import sys import pprint sys.path.append(\"../\")  # import the Access Swesarr Class from the access_swesarr submodule from swesarr_pytools.access_swesarr import AccessRadiometer  # Optional import for data from datetime import date In\u00a0[4]: Copied! <pre># First let us instantiate the class\nradiom = AccessRadiometer()\n</pre> # First let us instantiate the class radiom = AccessRadiometer() <p>Let us view some available radiometer data</p> In\u00a0[5]: Copied! <pre>radiom_meta = radiom.radiometer_meta\npprint.pprint(radiom_meta)\n</pre> radiom_meta = radiom.radiometer_meta pprint.pprint(radiom_meta) <pre>{'2020.02.10': ['SNEX20_SWESARR_TB_GRMST1_27601_20006_000_200210_XKKa225H_v01.csv'],\n '2020.02.11': ['SNEX20_SWESARR_TB_GRMCT2_13801_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMST1_27403_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMNT1_09602_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13802_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31902_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMST1_27501_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMST1_27502_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13803_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMNT1_09503_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31901_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMNT1_09501_20007_000_200211_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31803_20007_000_200211_XKKa225H_v01.csv'],\n '2020.02.12': ['SNEX20_SWESARR_TB_GRMCT2_31903_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMST1_27503_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31901_20009_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31901_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13802_20009_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31902_20009_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMNT1_09502_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMST1_27502_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMNT1_09503_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13903_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_31902_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMST1_27401_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13902_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMNT1_09601_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13901_20008_000_200212_XKKa225H_v01.csv',\n                'SNEX20_SWESARR_TB_GRMCT2_13801_20009_000_200212_XKKa225H_v01.csv']}\n</pre> <p>Downloading data</p> <p>We can download any of these flight lines seen in the meta, or all flight path from a specific day, or the entire three day period.</p> <p>In this example we will use the same instance of the radiometer class we instantiated earlier</p> In\u00a0[6]: Copied! <pre># Specify any flight line\nexample_radiom = \"SNEX20_SWESARR_TB_GRMCT2_31901_20007_000_200211_XKKa225H_v01.csv\"\n\n#Specify a destination folder on you computer \ndestination_on_computer = \"../resources/radiometer\"\n\nradiom.download_radiometer(file_name=example_radiom, destination_folder=destination_on_computer)\n</pre> # Specify any flight line example_radiom = \"SNEX20_SWESARR_TB_GRMCT2_31901_20007_000_200211_XKKa225H_v01.csv\"  #Specify a destination folder on you computer  destination_on_computer = \"../resources/radiometer\"  radiom.download_radiometer(file_name=example_radiom, destination_folder=destination_on_computer) <pre>ACCESS_SWESARR - 2024-10-07 21:10:35,913 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31901_20007_000_200211_XKKa225H_v01.csv\n</pre> <p>In this example we will use the same instance of the radiometer class we instantiated earlier to download to the entire data set.</p> In\u00a0[7]: Copied! <pre>radiom.bulk_download_radiometer(destination_folder=destination_on_computer, day=\"all\")\n</pre> radiom.bulk_download_radiometer(destination_folder=destination_on_computer, day=\"all\") <pre>ACCESS_SWESARR - 2024-10-07 21:10:38,340 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27601_20006_000_200210_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:40,698 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13801_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:43,077 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27403_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:45,363 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMNT1_09602_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:49,293 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13802_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:51,560 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31902_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:53,798 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27501_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:56,114 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27502_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:10:58,238 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13803_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:00,911 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMNT1_09503_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:03,951 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31901_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:06,489 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMNT1_09501_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:08,812 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31803_20007_000_200211_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:12,310 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31903_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:15,639 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27503_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:18,128 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31901_20009_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:20,573 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31901_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:24,033 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13802_20009_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:26,677 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31902_20009_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:29,361 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMNT1_09502_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:31,705 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27502_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:33,929 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMNT1_09503_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:36,709 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13903_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:39,107 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_31902_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:41,986 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMST1_27401_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:45,121 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13902_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:47,484 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMNT1_09601_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:49,596 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13901_20008_000_200212_XKKa225H_v01.csv\nACCESS_SWESARR - 2024-10-07 21:11:51,623 - INFO - Downloaded: SNEX20_SWESARR_TB_GRMCT2_13801_20009_000_200212_XKKa225H_v01.csv\n</pre> <p>In this example we will use the same instance of the radiometer class we instantiated earlier to download to the entire data set for 2020/02/11</p> In\u00a0[8]: Copied! <pre># radiom.bulk_download_radiometer(destination_folder=destination_on_computer, day=\"11\")\n</pre> # radiom.bulk_download_radiometer(destination_folder=destination_on_computer, day=\"11\")"},{"location":"examples/downloading_radiom/#downloading-radiometer-data","title":"Downloading Radiometer Data\u00b6","text":""},{"location":"examples/downloading_radiom/#retrieving-metadata","title":"Retrieving Metadata\u00b6","text":"<p>To download radiometer data from NSIDC, you will need an earthdata account, your earthdata username and password will be used to create a special .netrc file in your home directory assuming you do not already have them stored in a preexisting .netrc (Note you only need to do this once for your computer). This will only be required the first time the <code>AccessRadiometer</code> class is instantiated. Kindly follow the instruction on the prompt to complete <code>.netrc</code> creation. This file stores your username and password, which will be automatically used during the download process. If you encounter an HTTP 401 error while using the `AccessRadiometer, it likely means this file is missing or incorrectly set up. The dot (.) at the beginning of the file name ensures it remains hidden in your file explorer. For more information on .netrc files, click here .</p> <p>This notebook will check if the file already exists on your system and create one if it's missing.</p>"},{"location":"examples/downloading_sar/","title":"Downloading sar","text":"In\u00a0[4]: Copied! <pre>import sys\nsys.path.append(\"../\")\n\n# import the Access Swesarr Class from the access_swesarr submodule\nfrom swesarr_pytools.access_swesarr import AccessSAR\nimport pprint\n\n# Optional import for data\nfrom datetime import date\n</pre> import sys sys.path.append(\"../\")  # import the Access Swesarr Class from the access_swesarr submodule from swesarr_pytools.access_swesarr import AccessSAR import pprint  # Optional import for data from datetime import date <p>The following cells demonstrate how to view metadata and search for flights within a specific time range.</p> <p><code>data_meta</code>: Provides key-value pairs that map flight paths to their corresponding dates.  <code>flight_name</code> : Gives a complete list of flight paths  <code>flight_dates</code>: Give a complete list of flight dates</p> In\u00a0[5]: Copied! <pre>swesarr_object = AccessSAR() # instantiates an object of the Access Swesarr Class\n</pre> swesarr_object = AccessSAR() # instantiates an object of the Access Swesarr Class In\u00a0[9]: Copied! <pre>swesarr_metadata = swesarr_object.data_meta # The meta data can be retrieve by simply calling the data_meta\npprint.pprint(f\"Flight meta key value pair: {swesarr_metadata}\")\n</pre> swesarr_metadata = swesarr_object.data_meta # The meta data can be retrieve by simply calling the data_meta pprint.pprint(f\"Flight meta key value pair: {swesarr_metadata}\") <pre>(\"Flight meta key value pair: {'GRMCT1_13801_19005_010_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMCT1_13802_19004_013_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMCT1_13802_19005_016_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMCT1_13803_19004_019_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMCT2_13802_20006_012_200210_225_XX_01/': \"\n \"datetime.date(2020, 2, 10), 'GRMCT2_13802_20008_011_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_13802_20009_004_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_13804_20007_022_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMCT2_13804_20008_015_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_13804_20009_008_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_13806_20007_026_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMCT2_13806_20008_019_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_31601_20006_011_200210_225_XX_01/': \"\n \"datetime.date(2020, 2, 10), 'GRMCT2_31801_20007_016_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMCT2_31801_20008_009_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_31803_20007_020_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMCT2_31803_20008_013_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_31803_20009_006_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_31805_20008_017_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_31901_20009_002_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMCT2_31905_20007_024_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMNT1_09302_20006_009_200210_225_XX_01/': \"\n \"datetime.date(2020, 2, 10), 'GRMNT1_09401_19005_006_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMNT1_09401_20006_005_200210_225_XX_01/': \"\n \"datetime.date(2020, 2, 10), 'GRMNT1_09401_20007_007_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMNT1_09402_19004_009_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMNT1_09402_19005_012_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMNT1_09402_20007_010_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMNT1_09402_20008_027_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMNT1_09403_19004_015_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMNT1_09403_19005_018_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMNT1_09403_20007_014_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMNT1_09403_20008_031_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMNT1_09501_20008_023_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMNT1_09502_20007_010_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMST1_27302_20006_007_200210_225_XX_01/': \"\n \"datetime.date(2020, 2, 10), 'GRMST1_27401_19003_007_191104_225_XX_01/': \"\n \"datetime.date(2019, 11, 4), 'GRMST1_27401_19004_005_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMST1_27401_19005_008_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMST1_27401_20007_005_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMST1_27401_20008_021_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMST1_27402_19004_011_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMST1_27402_19005_014_191106_225_XX_01/': \"\n \"datetime.date(2019, 11, 6), 'GRMST1_27402_20008_025_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMST1_27403_19004_017_191105_225_XX_01/': \"\n \"datetime.date(2019, 11, 5), 'GRMST1_27403_20007_012_200211_225_XX_01/': \"\n \"datetime.date(2020, 2, 11), 'GRMST1_27403_20008_029_200212_225_XX_01/': \"\n \"datetime.date(2020, 2, 12), 'GRMST1_27501_20006_003_200210_225_XX_01/': \"\n \"datetime.date(2020, 2, 10), 'GRMST1_27502_20007_009_200211_225_XX_01/': \"\n 'datetime.date(2020, 2, 11)}')\n</pre> In\u00a0[10]: Copied! <pre>flight_paths = swesarr_object.flight_names\npprint.pprint(f\"Flight Paths: {flight_paths}\")\n</pre> flight_paths = swesarr_object.flight_names pprint.pprint(f\"Flight Paths: {flight_paths}\") <pre>(\"Flight Paths: ['GRMCT1_13801_19005_010_191106_225_XX_01/', \"\n \"'GRMCT1_13802_19004_013_191105_225_XX_01/', \"\n \"'GRMCT1_13802_19005_016_191106_225_XX_01/', \"\n \"'GRMCT1_13803_19004_019_191105_225_XX_01/', \"\n \"'GRMCT2_13802_20006_012_200210_225_XX_01/', \"\n \"'GRMCT2_13802_20008_011_200212_225_XX_01/', \"\n \"'GRMCT2_13802_20009_004_200212_225_XX_01/', \"\n \"'GRMCT2_13804_20007_022_200211_225_XX_01/', \"\n \"'GRMCT2_13804_20008_015_200212_225_XX_01/', \"\n \"'GRMCT2_13804_20009_008_200212_225_XX_01/', \"\n \"'GRMCT2_13806_20007_026_200211_225_XX_01/', \"\n \"'GRMCT2_13806_20008_019_200212_225_XX_01/', \"\n \"'GRMCT2_31601_20006_011_200210_225_XX_01/', \"\n \"'GRMCT2_31801_20007_016_200211_225_XX_01/', \"\n \"'GRMCT2_31801_20008_009_200212_225_XX_01/', \"\n \"'GRMCT2_31803_20007_020_200211_225_XX_01/', \"\n \"'GRMCT2_31803_20008_013_200212_225_XX_01/', \"\n \"'GRMCT2_31803_20009_006_200212_225_XX_01/', \"\n \"'GRMCT2_31805_20008_017_200212_225_XX_01/', \"\n \"'GRMCT2_31901_20009_002_200212_225_XX_01/', \"\n \"'GRMCT2_31905_20007_024_200211_225_XX_01/', \"\n \"'GRMNT1_09302_20006_009_200210_225_XX_01/', \"\n \"'GRMNT1_09401_19005_006_191106_225_XX_01/', \"\n \"'GRMNT1_09401_20006_005_200210_225_XX_01/', \"\n \"'GRMNT1_09401_20007_007_200211_225_XX_01/', \"\n \"'GRMNT1_09402_19004_009_191105_225_XX_01/', \"\n \"'GRMNT1_09402_19005_012_191106_225_XX_01/', \"\n \"'GRMNT1_09402_20007_010_200211_225_XX_01/', \"\n \"'GRMNT1_09402_20008_027_200212_225_XX_01/', \"\n \"'GRMNT1_09403_19004_015_191105_225_XX_01/', \"\n \"'GRMNT1_09403_19005_018_191106_225_XX_01/', \"\n \"'GRMNT1_09403_20007_014_200211_225_XX_01/', \"\n \"'GRMNT1_09403_20008_031_200212_225_XX_01/', \"\n \"'GRMNT1_09501_20008_023_200212_225_XX_01/', \"\n \"'GRMNT1_09502_20007_010_200211_225_XX_01/', \"\n \"'GRMST1_27302_20006_007_200210_225_XX_01/', \"\n \"'GRMST1_27401_19003_007_191104_225_XX_01/', \"\n \"'GRMST1_27401_19004_005_191105_225_XX_01/', \"\n \"'GRMST1_27401_19005_008_191106_225_XX_01/', \"\n \"'GRMST1_27401_20007_005_200211_225_XX_01/', \"\n \"'GRMST1_27401_20008_021_200212_225_XX_01/', \"\n \"'GRMST1_27402_19004_011_191105_225_XX_01/', \"\n \"'GRMST1_27402_19005_014_191106_225_XX_01/', \"\n \"'GRMST1_27402_20008_025_200212_225_XX_01/', \"\n \"'GRMST1_27403_19004_017_191105_225_XX_01/', \"\n \"'GRMST1_27403_20007_012_200211_225_XX_01/', \"\n \"'GRMST1_27403_20008_029_200212_225_XX_01/', \"\n \"'GRMST1_27501_20006_003_200210_225_XX_01/', \"\n \"'GRMST1_27502_20007_009_200211_225_XX_01/']\")\n</pre> In\u00a0[11]: Copied! <pre>#Retrieve flight date\nflight_dates = swesarr_object.flight_dates\npprint.pprint(f\"Flight Dates: {flight_dates}\")\n</pre> #Retrieve flight date flight_dates = swesarr_object.flight_dates pprint.pprint(f\"Flight Dates: {flight_dates}\") <pre>('Flight Dates: [datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), '\n 'datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2020, '\n '2, 10), datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), '\n 'datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, '\n '2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), '\n 'datetime.date(2020, 2, 10), datetime.date(2020, 2, 11), datetime.date(2020, '\n '2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), '\n 'datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, '\n '2, 12), datetime.date(2020, 2, 11), datetime.date(2020, 2, 10), '\n 'datetime.date(2019, 11, 6), datetime.date(2020, 2, 10), datetime.date(2020, '\n '2, 11), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), '\n 'datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2019, '\n '11, 5), datetime.date(2019, 11, 6), datetime.date(2020, 2, 11), '\n 'datetime.date(2020, 2, 12), datetime.date(2020, 2, 12), datetime.date(2020, '\n '2, 11), datetime.date(2020, 2, 10), datetime.date(2019, 11, 4), '\n 'datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2020, '\n '2, 11), datetime.date(2020, 2, 12), datetime.date(2019, 11, 5), '\n 'datetime.date(2019, 11, 6), datetime.date(2020, 2, 12), datetime.date(2019, '\n '11, 5), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), '\n 'datetime.date(2020, 2, 10), datetime.date(2020, 2, 11)]')\n</pre> <p>Searching for dates within a range</p> <p>To search within a specific date range, use the available_date_within_range method by specifying a start and end date. You can enter the dates as string using the standard American date format or use the datetime library's date format. The method returns a list of all flight paths available within the specified range.</p> <p>Example, specifying date python datetime object</p> In\u00a0[6]: Copied! <pre>available_dates = swesarr_object.available_date_within_range(start_date=date(2019, 11, 5),\n                                               end_date=date(2019, 11, 6))\npprint.pprint(f\"Available flight: {available_dates}\")\n</pre> available_dates = swesarr_object.available_date_within_range(start_date=date(2019, 11, 5),                                                end_date=date(2019, 11, 6)) pprint.pprint(f\"Available flight: {available_dates}\") <pre>('Available flight: [datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), '\n 'datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, '\n '11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), '\n 'datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, '\n '11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), '\n 'datetime.date(2019, 11, 6), datetime.date(2019, 11, 5)]')\n</pre> <p>Example, specifying date as string</p> In\u00a0[8]: Copied! <pre>available_dates_string = swesarr_object.available_date_within_range(start_date=\"11/5/19\",\n                                               end_date=\"11/6/19\")\npprint.pprint(f\"Available flight: {available_dates_string}\")\n</pre> available_dates_string = swesarr_object.available_date_within_range(start_date=\"11/5/19\",                                                end_date=\"11/6/19\") pprint.pprint(f\"Available flight: {available_dates_string}\") <pre>('Available flight: [datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), '\n 'datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), datetime.date(2019, '\n '11, 6), datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), '\n 'datetime.date(2019, 11, 5), datetime.date(2019, 11, 6), datetime.date(2019, '\n '11, 5), datetime.date(2019, 11, 6), datetime.date(2019, 11, 5), '\n 'datetime.date(2019, 11, 6), datetime.date(2019, 11, 5)]')\n</pre> In\u00a0[13]: Copied! <pre>help(swesarr_object.download_data)\n</pre> help(swesarr_object.download_data) <pre>Help on method download_data in module access_swesarr:\n\ndownload_data(flight_path: str, folder_name: str, band: str = 'all', dem: bool = False) -&gt; None method of access_swesarr.AccessSAR instance\n    Downloads data for a specified flight path.\n\n    This method downloads the associated data into the specified folder. It also\n    allows for filtering by band and includes an option to download DEM (Digital\n    Elevation Model) data.\n\n    :param flight_path: str\n        The name of the flight path to be downloaded\n    :param folder_name: str\n        The name of the folder where the downloaded data will be stored\n    :param band: str, optional\n        Specifies the band to download (e.g., \"X\", \"KuLo\", \"KuHi\"). Defaults to \"all\",\n        which downloads all available bands\n    :param dem: bool, optional\n        If True, the Digital Elevation Model (DEM) data is downloaded along with the\n        band data. Defaults to False\n    :return: None\n\n</pre> In\u00a0[14]: Copied! <pre>swesarr_object.download_data(flight_path=\"GRMCT1_13801_19005_010_191106_225_XX_01\",\n                             folder_name=\"./swesarr_pytool/resources/swesarr_data/\",\n                             dem=False,\n                             band=\"all\")\n</pre> swesarr_object.download_data(flight_path=\"GRMCT1_13801_19005_010_191106_225_XX_01\",                              folder_name=\"./swesarr_pytool/resources/swesarr_data/\",                              dem=False,                              band=\"all\") <pre>ACCESS_SWESARR - 2024-10-07 19:37:29,524 - INFO - Downloaded: https://glihtdata.gsfc.nasa.gov/files/radar/SWESARR/prerelease/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_09225VH_XX_01.tif\nACCESS_SWESARR - 2024-10-07 19:37:56,273 - INFO - Downloaded: https://glihtdata.gsfc.nasa.gov/files/radar/SWESARR/prerelease/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_09225VV_XX_01.tif\nACCESS_SWESARR - 2024-10-07 19:38:18,782 - INFO - Downloaded: https://glihtdata.gsfc.nasa.gov/files/radar/SWESARR/prerelease/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_13225VH_XX_01.tif\nACCESS_SWESARR - 2024-10-07 19:38:40,089 - INFO - Downloaded: https://glihtdata.gsfc.nasa.gov/files/radar/SWESARR/prerelease/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_13225VV_XX_01.tif\nACCESS_SWESARR - 2024-10-07 19:39:07,938 - INFO - Downloaded: https://glihtdata.gsfc.nasa.gov/files/radar/SWESARR/prerelease/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_17225VH_XX_01.tif\nACCESS_SWESARR - 2024-10-07 19:39:30,818 - INFO - Downloaded: https://glihtdata.gsfc.nasa.gov/files/radar/SWESARR/prerelease/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_17225VV_XX_01.tif\n</pre> <p>Additionally the <code>download_all_data</code> function can be called to download all flight path. See help below</p> In\u00a0[5]: Copied! <pre>help(swesarr_object.download_data)\n</pre> help(swesarr_object.download_data) <pre>Help on method download_data in module swesarr_pytools.access_swesarr:\n\ndownload_data(flight_path: str, folder_name: str, band: str = 'all', dem: bool = False) -&gt; None method of swesarr_pytools.access_swesarr.AccessSwesarr instance\n    Downloads data for a specified flight path.\n\n    This method downloads the associated data into the specified folder. It also\n    allows for filtering by band and includes an option to download DEM (Digital\n    Elevation Model) data.\n\n    :param flight_path: str\n        The name of the flight path to be downloaded\n    :param folder_name: str\n        The name of the folder where the downloaded data will be stored\n    :param band: str, optional\n        Specifies the band to download (e.g., \"X\", \"KuLo\", \"KuHi\"). Defaults to \"all\",\n        which downloads all available bands\n    :param dem: bool, optional\n        If True, the Digital Elevation Model (DEM) data is downloaded along with the\n        band data. Defaults to False\n    :return: None\n\n</pre> In\u00a0[6]: Copied! <pre>help(swesarr_object.download_all_data)\n</pre> help(swesarr_object.download_all_data) <pre>Help on method download_all_data in module swesarr_pytools.access_swesarr:\n\ndownload_all_data(folder_name: str, band: str = 'all', dem: bool = False) -&gt; None method of swesarr_pytools.access_swesarr.AccessSwesarr instance\n    Downloads data for all flights.\n\n    This method iterates over all flight paths generated in `self.flight_names` list\n    and downloads the associated data into the specified folder. It also\n    allows for filtering by band and includes an option to download DEM (Digital\n    Elevation Model) data.\n\n    :param folder_name: str\n        The name of the folder where the downloaded data will be stored\n    :param band: str, optional\n        Specifies the band to download (e.g., \"X\", \"KuLo\", \"KuHi\"). Defaults to \"all\",\n        which downloads all available bands\n    :param dem: bool, optional\n        If True, the Digital Elevation Model (DEM) data is downloaded along with the\n        band data. Defaults to False\n\n    :return: None\n\n</pre>"},{"location":"examples/downloading_sar/#downloading-sar-data","title":"Downloading SAR Data\u00b6","text":""},{"location":"examples/downloading_sar/#retrieving-metadata","title":"Retrieving Metadata\u00b6","text":"<p>In this notebook, we will demonstrate the core functionality of the <code>AccessSAR</code> class. This class provides essential utilities for viewing SWESARR metadata and downloading SWESARR files.</p>"},{"location":"examples/downloading_sar/#data-download","title":"Data Download\u00b6","text":"<p>The <code>AccessSwesarr</code> class also provides functionality to download SWESARR data, either for all frequency bands of a specified flight path or for a single frequency from a selected flight line. The <code>download_data</code> function allows users to specify a flight path and either retrieve all associated frequency bands in one go or download data for a specific frequency. This flexibility makes it convenient for users to access the SWESARR data they need based on their particular analytics requirements. You will need to provide a destination folder in addition to the fight path of choice. See example help below.</p> <p>In the following example, we will download the <code>GRMCT1_13801_19005_010_191106_225_XX_01</code> flight path (To see available flight paths see the access meta function above). We also specify a folder where we want to store the data. Optional arguments include dem options, the download associated dem if send to true, additionally the band option is used to specify a specific band, See function help for additional information</p>"},{"location":"examples/processing_sar_data/","title":"Processing sar data","text":"<p>In this notebook, we will demonstrate the core functionality of the ReadSwesarr class. This class provides essential utilities for converting tif image to rasters and dataframe.</p> In\u00a0[2]: Copied! <pre>import sys\nsys.path.append(\"../\")\nfrom swesarr_pytools.data_tools import ReadSwesarr\nimport pprint\n</pre> import sys sys.path.append(\"../\") from swesarr_pytools.data_tools import ReadSwesarr import pprint <p>Let's specify the directories we need to work it</p> In\u00a0[5]: Copied! <pre># Just one band to test the downloading a singular band\nx_band = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_09225VH_XX_01.tif\"\n\n# Path to  v1 flight path\nflight_folder = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\"\n\n# path to lidar snow depth measurement for the area\nlidar_data_path = \"../resources/lidar_data/ASO_GrandMesa_2020Feb13_snowdepth_3m.tif\"\n\n# Path to  v3 flight path\nswesarr_fall_v3 = \"../resources/swesarr_data_v3/19004_011\"\nswesarr_winter_v3 = \"../resources/swesarr_data_v3/20006_003\"\n\n\n# Path to  v1 flight path\nswesarr_fall_v1 = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\"\nswesarr_winter_v1 = \"../resources/swesarr_data/GRMCT2_13802_20006_012_200210_225_XX_01\"\n</pre> # Just one band to test the downloading a singular band x_band = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01/GRMCT1_13801_19005_010_191106_09225VH_XX_01.tif\"  # Path to  v1 flight path flight_folder = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\"  # path to lidar snow depth measurement for the area lidar_data_path = \"../resources/lidar_data/ASO_GrandMesa_2020Feb13_snowdepth_3m.tif\"  # Path to  v3 flight path swesarr_fall_v3 = \"../resources/swesarr_data_v3/19004_011\" swesarr_winter_v3 = \"../resources/swesarr_data_v3/20006_003\"   # Path to  v1 flight path swesarr_fall_v1 = \"../resources/swesarr_data/GRMCT1_13801_19005_010_191106_225_XX_01\" swesarr_winter_v1 = \"../resources/swesarr_data/GRMCT2_13802_20006_012_200210_225_XX_01\" <p>We can also view a list of data files in a specified directory using the following command. These will be combined to form a 6D raster</p> In\u00a0[6]: Copied! <pre>example = ReadSwesarr(flight_path=flight_folder, version=\"v1\")\nexample_list = example.get_data_files()\npprint.pprint(f\"Folder List: {example_list}\")\n</pre> example = ReadSwesarr(flight_path=flight_folder, version=\"v1\") example_list = example.get_data_files() pprint.pprint(f\"Folder List: {example_list}\") <pre>(\"Folder List: ['GRMCT1_13801_19005_010_191106_13225VH_XX_01.tif', \"\n \"'GRMCT1_13801_19005_010_191106_17225VH_XX_01.tif', \"\n \"'GRMCT1_13801_19005_010_191106_09225VV_XX_01.tif', \"\n \"'GRMCT1_13801_19005_010_191106_17225VV_XX_01.tif', \"\n \"'GRMCT1_13801_19005_010_191106_13225VV_XX_01.tif', \"\n \"'GRMCT1_13801_19005_010_191106_09225VH_XX_01.tif']\")\n</pre> <p>To retrieve the raster run the following . The resulting xarray dataset, can be manipulated using normal rioxarray/xarray operations, Since it is an xarray object itself.</p> In\u00a0[8]: Copied! <pre>example_raster = example.get_swesarr_raster()\nexample_raster\n</pre> example_raster = example.get_swesarr_raster() example_raster Out[8]: <pre>&lt;xarray.DataArray (band: 6, y: 3651, x: 2963)&gt;\ndask.array&lt;concatenate, shape=(6, 3651, 2963), dtype=float32, chunksize=(1, 1200, 1200), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * band         (band) &lt;U4 '13VH' '17VH' '09VV' '17VV' '13VV' '09VH'\n  * x            (x) float64 7.412e+05 7.412e+05 ... 7.471e+05 7.471e+05\n  * y            (y) float64 4.328e+06 4.328e+06 4.328e+06 ... 4.32e+06 4.32e+06\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    _FillValue:     nan\n    scale_factor:   1.0\n    add_offset:     0.0</pre>xarray.DataArray<ul><li>band: 6</li><li>y: 3651</li><li>x: 2963</li></ul><ul><li>dask.array&lt;chunksize=(1, 1200, 1200), meta=np.ndarray&gt;  Array   Chunk   Bytes   247.60 MiB   5.49 MiB   Shape   (6, 3651, 2963)   (1, 1200, 1200)   Dask graph   72 chunks in 17 graph layers   Data type   float32 numpy.ndarray  2963 3651 6 </li><li>Coordinates: (4)<ul><li>band(band)&lt;U4'13VH' '17VH' ... '13VV' '09VH'<pre>array(['13VH', '17VH', '09VV', '17VV', '13VV', '09VH'], dtype='&lt;U4')</pre></li><li>x(x)float647.412e+05 7.412e+05 ... 7.471e+05<pre>array([741213.109977, 741215.109977, 741217.109977, ..., 747133.109977,\n       747135.109977, 747137.109977])</pre></li><li>y(y)float644.328e+06 4.328e+06 ... 4.32e+06<pre>array([4327758.006409, 4327756.006409, 4327754.006409, ..., 4320462.006409,\n       4320460.006409, 4320458.006409])</pre></li><li>spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 12N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-111],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32612\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 12Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-111.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 12N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-111],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32612\"]]GeoTransform :741212.1099766805 2.0 0.0 4327759.006409172 0.0 -2.0<pre>array(0)</pre></li></ul></li><li>Indexes: (3)<ul><li>bandPandasIndex<pre>PandasIndex(Index(['13VH', '17VH', '09VV', '17VV', '13VV', '09VH'], dtype='object', name='band'))</pre></li><li>xPandasIndex<pre>PandasIndex(Index([741213.1099766805, 741215.1099766805, 741217.1099766805,\n       741219.1099766805, 741221.1099766805, 741223.1099766805,\n       741225.1099766805, 741227.1099766805, 741229.1099766805,\n       741231.1099766805,\n       ...\n       747119.1099766805, 747121.1099766805, 747123.1099766805,\n       747125.1099766805, 747127.1099766805, 747129.1099766805,\n       747131.1099766805, 747133.1099766805, 747135.1099766805,\n       747137.1099766805],\n      dtype='float64', name='x', length=2963))</pre></li><li>yPandasIndex<pre>PandasIndex(Index([4327758.006409172, 4327756.006409172, 4327754.006409172,\n       4327752.006409172, 4327750.006409172, 4327748.006409172,\n       4327746.006409172, 4327744.006409172, 4327742.006409172,\n       4327740.006409172,\n       ...\n       4320476.006409172, 4320474.006409172, 4320472.006409172,\n       4320470.006409172, 4320468.006409172, 4320466.006409172,\n       4320464.006409172, 4320462.006409172, 4320460.006409172,\n       4320458.006409172],\n      dtype='float64', name='y', length=3651))</pre></li></ul></li><li>Attributes: (4)AREA_OR_POINT :Area_FillValue :nanscale_factor :1.0add_offset :0.0</li></ul> <p>To retrieve a dataframe of the xarray above run the following. The resulting dataframe, can be manipulated using normal pandas operations.</p> In\u00a0[10]: Copied! <pre>example_df = example.get_swesarr_df()\nexample_df.tail(5)\n</pre> example_df = example.get_swesarr_df() example_df.tail(5) Out[10]: y x F09VV F09VH F13VV F13VH F17VV F17VH 10589389 4.320612e+06 746393.109977 -17.756666 -30.629366 -31.941320 -32.845257 -40.240311 -38.687332 10589390 4.320612e+06 746395.109977 -17.891167 -30.814734 -32.145603 -33.278454 -38.791313 -41.042126 10589391 4.320612e+06 746397.109977 -17.743111 -30.678053 -33.162926 -33.813126 -38.793060 -40.096455 10592352 4.320610e+06 746393.109977 -17.801363 -30.358782 -29.526028 -33.857082 -38.059433 -42.774803 10592353 4.320610e+06 746395.109977 -18.255501 -29.933887 -33.326679 -29.271967 -38.081070 -39.193199 <p>To retrieve the a single band specify the band as shown below.</p> In\u00a0[11]: Copied! <pre>x_example = ReadSwesarr(flight_path=x_band, band='x')\nx_example_raster = x_example.get_swesarr_raster()\nx_example_raster\n</pre> x_example = ReadSwesarr(flight_path=x_band, band='x') x_example_raster = x_example.get_swesarr_raster() x_example_raster Out[11]: <pre>&lt;xarray.DataArray (band: 1, y: 3651, x: 2963)&gt;\ndask.array&lt;open_rasterio-14a7a97d22cd3240f4cb28ae0ea87e94&lt;this-array&gt;, shape=(1, 3651, 2963), dtype=float32, chunksize=(1, 1200, 1200), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * band         (band) &lt;U4 '09VH'\n  * x            (x) float64 7.412e+05 7.412e+05 ... 7.471e+05 7.471e+05\n  * y            (y) float64 4.328e+06 4.328e+06 4.328e+06 ... 4.32e+06 4.32e+06\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    _FillValue:     nan\n    scale_factor:   1.0\n    add_offset:     0.0</pre>xarray.DataArray<ul><li>band: 1</li><li>y: 3651</li><li>x: 2963</li></ul><ul><li>dask.array&lt;chunksize=(1, 1200, 1200), meta=np.ndarray&gt;  Array   Chunk   Bytes   41.27 MiB   5.49 MiB   Shape   (1, 3651, 2963)   (1, 1200, 1200)   Dask graph   12 chunks in 2 graph layers   Data type   float32 numpy.ndarray  2963 3651 1 </li><li>Coordinates: (4)<ul><li>band(band)&lt;U4'09VH'<pre>array(['09VH'], dtype='&lt;U4')</pre></li><li>x(x)float647.412e+05 7.412e+05 ... 7.471e+05<pre>array([741213.109977, 741215.109977, 741217.109977, ..., 747133.109977,\n       747135.109977, 747137.109977])</pre></li><li>y(y)float644.328e+06 4.328e+06 ... 4.32e+06<pre>array([4327758.006409, 4327756.006409, 4327754.006409, ..., 4320462.006409,\n       4320460.006409, 4320458.006409])</pre></li><li>spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 12N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-111],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32612\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 12Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-111.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 12N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-111],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32612\"]]GeoTransform :741212.1099766805 2.0 0.0 4327759.006409172 0.0 -2.0<pre>array(0)</pre></li></ul></li><li>Indexes: (3)<ul><li>bandPandasIndex<pre>PandasIndex(Index(['09VH'], dtype='object', name='band'))</pre></li><li>xPandasIndex<pre>PandasIndex(Index([741213.1099766805, 741215.1099766805, 741217.1099766805,\n       741219.1099766805, 741221.1099766805, 741223.1099766805,\n       741225.1099766805, 741227.1099766805, 741229.1099766805,\n       741231.1099766805,\n       ...\n       747119.1099766805, 747121.1099766805, 747123.1099766805,\n       747125.1099766805, 747127.1099766805, 747129.1099766805,\n       747131.1099766805, 747133.1099766805, 747135.1099766805,\n       747137.1099766805],\n      dtype='float64', name='x', length=2963))</pre></li><li>yPandasIndex<pre>PandasIndex(Index([4327758.006409172, 4327756.006409172, 4327754.006409172,\n       4327752.006409172, 4327750.006409172, 4327748.006409172,\n       4327746.006409172, 4327744.006409172, 4327742.006409172,\n       4327740.006409172,\n       ...\n       4320476.006409172, 4320474.006409172, 4320472.006409172,\n       4320470.006409172, 4320468.006409172, 4320466.006409172,\n       4320464.006409172, 4320462.006409172, 4320460.006409172,\n       4320458.006409172],\n      dtype='float64', name='y', length=3651))</pre></li></ul></li><li>Attributes: (4)AREA_OR_POINT :Area_FillValue :nanscale_factor :1.0add_offset :0.0</li></ul>"}]}